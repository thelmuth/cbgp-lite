(ns llmgp-hacking.examples)

(comment

  ;; This is a genome, so we can see what one from random generation looks like
  (let [genome '({:gene :var, :name erp12.cbgp-lite.lang.lib/whitespace?} {:gene :lit, :val 2, :type {:type int?}} {:gene :lit, :val -425, :type {:type int?}} {:gene :lit, :val 0, :type {:type int?}} {:gene :var, :name map2-vec} {:gene :local, :idx 1065480610} {:gene :lit, :val 0, :type {:type int?}} {:gene :var, :name merge} {:gene :var, :name int-mult} {:gene :lit, :val -638, :type {:type int?}} {:gene :apply} {:gene :var, :name erp12.cbgp-lite.lang.lib/letter?} {:gene :local, :idx 1352188821} {:gene :local, :idx 871989827} {:gene :local, :idx 859981457} {:gene :local, :idx 737988616} {:gene :apply} {:gene :var, :name partial1-fn3} {:gene :var, :name int-quot} {:gene :apply} {:gene :lit, :val -965, :type {:type int?}} {:gene :fn, :arg-types [{:type boolean?}], :ret-type {:type :vector, :child {:type int?}}} {:gene :apply} {:gene :var, :name disj} {:gene :let} {:gene :lit, :val 0, :type {:type int?}} {:gene :local, :idx 850399289} {:gene :var, :name range3} {:gene :var, :name comp3-fn1} {:gene :lit, :val 2, :type {:type int?}} {:gene :apply} {:gene :var, :name left} {:gene :apply} {:gene :local, :idx 1749329675} {:gene :var, :name erp12.cbgp-lite.lang.lib/and} {:gene :apply} {:gene :close} {:gene :var, :name double} {:gene :close} {:gene :lit, :val 2, :type {:type int?}} {:gene :apply} {:gene :local, :idx 333663282} {:gene :var, :name get} {:gene :lit, :val 156, :type {:type int?}} {:gene :lit, :val 531, :type {:type int?}} {:gene :apply} {:gene :var, :name char-occurrences} {:gene :apply} {:gene :apply} {:gene :local, :idx 2087044041} {:gene :local, :idx 398212854} {:gene :var, :name fold-map} {:gene :apply} {:gene :local, :idx 2122008347} {:gene :lit, :val 0, :type {:type int?}} {:gene :close} {:gene :var, :name erp12.cbgp-lite.lang.lib/min'} {:gene :lit, :val 2, :type {:type int?}} {:gene :lit, :val 1, :type {:type int?}} {:gene :var, :name ->map3} {:gene :lit, :val -581, :type {:type int?}} {:gene :lit, :val 2, :type {:type int?}} {:gene :lit, :val 2, :type {:type int?}} {:gene :var, :name erp12.cbgp-lite.lang.lib/sortv-by} {:gene :lit, :val 687, :type {:type int?}} {:gene :close} {:gene :apply} {:gene :local, :idx 1146912485} {:gene :var, :name vec->set} {:gene :close} {:gene :local, :idx 542973907} {:gene :var, :name empty?} {:gene :local, :idx 1566252483} {:gene :lit, :val 0, :type {:type int?}} {:gene :close} {:gene :var, :name double} {:gene :close} {:gene :apply} {:gene :lit, :val 60, :type {:type int?}} {:gene :lit, :val 5, :type {:type int?}} {:gene :close} {:gene :fn, :arg-types [{:type boolean?} {:type boolean?}], :ret-type {:type int?}} {:gene :local, :idx 1265823840} {:gene :local, :idx 2015509806} {:gene :lit, :val 1, :type {:type int?}} {:gene :local, :idx 1393945392} {:gene :local, :idx 1504341923} {:gene :lit, :val 1, :type {:type int?}} {:gene :apply} {:gene :fn, :arg-types [{:type int?} {:type :vector, :child {:type int?}}], :ret-type {:type :vector, :child {:type int?}}} {:gene :lit, :val 1, :type {:type int?}} {:gene :apply} {:gene :lit, :val 0, :type {:type int?}} {:gene :local, :idx 1895097073} {:gene :apply} {:gene :local, :idx 985170710} {:gene :apply} {:gene :apply} {:gene :lit, :val 2, :type {:type int?}} {:gene :apply} {:gene :var, :name ->set2} {:gene :local, :idx 31457261} {:gene :apply} {:gene :apply} {:gene :lit, :val -438, :type {:type int?}} {:gene :lit, :val -723, :type {:type int?}} {:gene :var, :name set-contains?} {:gene :local, :idx 375721227} {:gene :local, :idx 1406167461} {:gene :lit, :val -459, :type {:type int?}} {:gene :local, :idx 1263908444} {:gene :let} {:gene :var, :name erp12.cbgp-lite.lang.lib/digit?} {:gene :lit, :val 1, :type {:type int?}} {:gene :var, :name clojure.set/union} {:gene :var, :name range1} {:gene :local, :idx 1853088482} {:gene :lit, :val 1, :type {:type int?}} {:gene :fn, :arg-types [{:type boolean?} {:type int?}], :ret-type {:type boolean?}} {:gene :var, :name count-vec} {:gene :var, :name first} {:gene :lit, :val 1, :type {:type int?}} {:gene :close} {:gene :local, :idx 2132048629} {:gene :apply} {:gene :var, :name erp12.cbgp-lite.lang.lib/keys-set} {:gene :lit, :val 2, :type {:type int?}} {:gene :apply} {:gene :apply} {:gene :local, :idx 283249942} {:gene :var, :name int-mult} {:gene :lit, :val 848, :type {:type int?}})]
    genome))

